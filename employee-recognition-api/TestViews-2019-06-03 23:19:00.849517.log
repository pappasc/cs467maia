DEBUG:root:TEST: GET /admins
DEBUG:root:QueryTool.__init__(): creating engine in dev
DEBUG:root:QueryTool.__init__(): connecting to db
DEBUG:root:InputValidatorTool.__init__(): creating InputValidatorTool instance
DEBUG:root:QueryTool.get(): query is select admin_id, first_name, last_name, created_timestamp, email_address from admins;
DEBUG:root:QueryTool.build_json_select(): returning {'admin_ids': [{u'created_timestamp': '2019-04-15 08:52:00', u'first_name': 'Conner', u'last_name': 'Pappas', u'email_address': 'pappasc@oregonstate.edu', u'admin_id': 1}]}
DEBUG:root:QueryTool.disconnect(): closing connection to db
INFO:root:admins_api: returning result {'admin_ids': [{u'created_timestamp': '2019-04-15 08:52:00', u'first_name': 'Conner', u'last_name': 'Pappas', u'email_address': 'pappasc@oregonstate.edu', u'admin_id': 1}]}
INFO:root:admins_api: returning status code 200
DEBUG:root:Checking: status code
DEBUG:root:Checking: keys
DEBUG:root:TEST: GET /admins/1
DEBUG:root:QueryTool.__init__(): creating engine in dev
DEBUG:root:QueryTool.__init__(): connecting to db
DEBUG:root:InputValidatorTool.__init__(): creating InputValidatorTool instance
DEBUG:root:QueryTool.get_by_id(): query is select admin_id, first_name, last_name, email_address, created_timestamp from admins where admin_id = :id;
DEBUG:root:QueryTool.build_json_select(): returning {u'created_timestamp': '2019-04-15 08:52:00', u'first_name': 'Conner', u'last_name': 'Pappas', u'email_address': 'pappasc@oregonstate.edu', u'admin_id': 1}
DEBUG:root:QueryTool.disconnect(): closing connection to db
INFO:root:admins_api: returning result {u'created_timestamp': '2019-04-15 08:52:00', u'first_name': 'Conner', u'last_name': 'Pappas', u'email_address': 'pappasc@oregonstate.edu', u'admin_id': 1}
INFO:root:admins_api: returning status code 200
DEBUG:root:Checking: status code
DEBUG:root:Checking: keys
DEBUG:root:TEST: POST /admins
DEBUG:root:QueryTool.__init__(): creating engine in dev
DEBUG:root:QueryTool.__init__(): connecting to db
DEBUG:root:InputValidatorTool.__init__(): creating InputValidatorTool instance
DEBUG:root:validating request data in /admins request
DEBUG:root:InputValidatorTool.valid_name(): validating name is between 2 and 256 chars
DEBUG:root:InputValidatorTool.valid_name(): validating name is between 2 and 256 chars
DEBUG:root:InputValidatorTool.valid_email(): validating email not empty
DEBUG:root:InputValidatorTool.valid_time(): validating time is in correct format YYYY-m-dd HH:MM:SS
DEBUG:root:InputValidatorTool.valid_password(): validating password is between 6 and 10 chars
DEBUG:root:InputValidatorTool.validate_admins(): returning None
DEBUG:root:QueryTool.post(): query is insert into admins (first_name, last_name, email_address, password, created_timestamp) values (:first_name, :last_name, :email_address, :password, :created_timestamp);
DEBUG:root:QueryTool.build_json_insert(): returning {'admin_id': '295'}
DEBUG:root:QueryTool.disconnect(): closing connection to db
INFO:root:admins_api: returning result {'admin_id': '295'}
INFO:root:admins_api: returning status code 200
DEBUG:root:<Response streamed [200 OK]>
DEBUG:root:Checking: status code
DEBUG:root:Checking: keys
DEBUG:root:Admin ID posted: 295
DEBUG:root:TEST: PUT /admins/295
DEBUG:root:QueryTool.__init__(): creating engine in dev
DEBUG:root:QueryTool.__init__(): connecting to db
DEBUG:root:InputValidatorTool.__init__(): creating InputValidatorTool instance
DEBUG:root:validating request data in /admins request
DEBUG:root:InputValidatorTool.valid_name(): validating name is between 2 and 256 chars
DEBUG:root:InputValidatorTool.valid_name(): validating name is between 2 and 256 chars
DEBUG:root:InputValidatorTool.valid_email(): validating email not empty
DEBUG:root:InputValidatorTool.validate_admins(): returning None
DEBUG:root:QueryTool.put(): update query is update admins set first_name = :first_name, last_name = :last_name, email_address = :email_address where admin_id = :admin_id;
DEBUG:root:QueryTool.put(): select query is select admin_id from admins where admin_id = :id;
DEBUG:root:QueryTool.build_json_select(): returning {u'admin_id': 295}
DEBUG:root:QueryTool.disconnect(): closing connection to db
INFO:root:admins_api: returning result {u'admin_id': 295}
INFO:root:admins_api: returning status code 200
DEBUG:root:Checking: status code
DEBUG:root:Checking: keys
DEBUG:root:TEST: PUT /admins/295/login
DEBUG:root:QueryTool.__init__(): creating engine in dev
DEBUG:root:QueryTool.__init__(): connecting to db
DEBUG:root:InputValidatorTool.__init__(): creating InputValidatorTool instance
DEBUG:root:validating request data in /login request
DEBUG:root:InputValidatorTool.valid_password(): validating password is between 6 and 10 chars
DEBUG:root:InputValidatorTool.validate_users(): returning None
DEBUG:root:QueryTool.put(): update query is update admins set password = :password where admin_id = :admin_id;
DEBUG:root:QueryTool.put(): select query is select admin_id from admins where admin_id = :id and password = :password;
DEBUG:root:QueryTool.build_json_select(): returning {u'admin_id': 295}
DEBUG:root:QueryTool.disconnect(): closing connection to db
INFO:root:admins_api: returning result {u'admin_id': 295}
INFO:root:admins_api: returning status code 200
DEBUG:root:Checking: status code
DEBUG:root:Checking: keys
DEBUG:root:TEST: DELETE /admins/295
DEBUG:root:QueryTool.__init__(): creating engine in dev
DEBUG:root:QueryTool.__init__(): connecting to db
DEBUG:root:InputValidatorTool.__init__(): creating InputValidatorTool instance
DEBUG:root:QueryTool.delete_by_id(): query is delete from admins where admin_id = :id;
DEBUG:root:QueryTool.build_json_delete(): returning: {'admin_id': None}
DEBUG:root:QueryTool.disconnect(): closing connection to db
INFO:root:admins_api: returning result {'admin_id': None}
INFO:root:admins_api: returning status code 200
DEBUG:root:Checking: status code
DEBUG:root:Checking: keys
DEBUG:root:TEST: GET /awards/authorize/1
DEBUG:root:QueryTool.__init__(): creating engine in dev
DEBUG:root:QueryTool.__init__(): connecting to db
DEBUG:root:QueryTool.get_awards_by_filter(): query is select * from awards where authorizing_user_id = :key;
DEBUG:root:QueryTool.build_json_select(): returning {'award_ids': [{u'authorizing_user_id': 1, u'distributed': True, u'awarded_datetime': '2019-04-27 10:00:00', u'receiving_user_id': 'None', u'award_id': 1, u'type': 'week'}]}
DEBUG:root:QueryTool.disconnect(): closing connection to db
INFO:root:awards_api: returning result {'award_ids': [{u'authorizing_user_id': 1, u'distributed': True, u'awarded_datetime': '2019-04-27 10:00:00', u'receiving_user_id': 'None', u'award_id': 1, u'type': 'week'}]}
INFO:root:awards_api: returning status code 200
DEBUG:root:Checking: status code
DEBUG:root:Checking: keys
DEBUG:root:TEST: GET /awards/datetime/2018-05-20
DEBUG:root:QueryTool.__init__(): creating engine in dev
DEBUG:root:QueryTool.__init__(): connecting to db
DEBUG:root:QueryTool.get_awards_by_filter(): query is select * from awards where awarded_datetime >= :key;
DEBUG:root:QueryTool.build_json_select(): returning {'award_ids': [{u'authorizing_user_id': 1, u'distributed': True, u'awarded_datetime': '2019-04-27 10:00:00', u'receiving_user_id': 'None', u'award_id': 1, u'type': 'week'}]}
DEBUG:root:QueryTool.disconnect(): closing connection to db
INFO:root:award_api: returning result {'award_ids': [{u'authorizing_user_id': 1, u'distributed': True, u'awarded_datetime': '2019-04-27 10:00:00', u'receiving_user_id': 'None', u'award_id': 1, u'type': 'week'}]}
INFO:root:award_api: returning status code 200
DEBUG:root:Checking: status code
DEBUG:root:Checking: keys
DEBUG:root:TEST: GET /awards/distributed/false
DEBUG:root:QueryTool.__init__(): creating engine in dev
DEBUG:root:QueryTool.__init__(): connecting to db
DEBUG:root:QueryTool.get_awards_by_filter(): query is select * from awards where distributed = :key;
DEBUG:root:QueryTool.build_json_select(): returning {'award_ids': []}
DEBUG:root:QueryTool.disconnect(): closing connection to db
INFO:root:awards_api: returning result {'award_ids': []}
INFO:root:awards_api: returning status code 200
DEBUG:root:Checking: status code
DEBUG:root:Checking: keys
DEBUG:root:TEST: GET /awards/1
DEBUG:root:QueryTool.__init__(): creating engine in dev
DEBUG:root:QueryTool.__init__(): connecting to db
DEBUG:root:InputValidatorTool.__init__(): creating InputValidatorTool instance
DEBUG:root:QueryTool.get_by_id(): query is select * from awards where award_id = :id;
DEBUG:root:QueryTool.build_json_select(): returning {u'authorizing_user_id': 1, u'distributed': True, u'awarded_datetime': '2019-04-27 10:00:00', u'receiving_user_id': 'None', u'award_id': 1, u'type': 'week'}
DEBUG:root:QueryTool.disconnect(): closing connection to db
INFO:root:awards_api: returning result {u'authorizing_user_id': 1, u'distributed': True, u'awarded_datetime': '2019-04-27 10:00:00', u'receiving_user_id': 'None', u'award_id': 1, u'type': 'week'}
INFO:root:awards_api: returning status code 200
DEBUG:root:Checking: status code
DEBUG:root:Checking: keys
DEBUG:root:TEST: GET /awards/receive/2
DEBUG:root:QueryTool.__init__(): creating engine in dev
DEBUG:root:QueryTool.__init__(): connecting to db
DEBUG:root:QueryTool.get_awards_by_filter(): query is select * from awards where receiving_user_id = :key;
DEBUG:root:QueryTool.build_json_select(): returning {'award_ids': []}
DEBUG:root:QueryTool.disconnect(): closing connection to db
INFO:root:awards_api: returning result {'award_ids': []}
INFO:root:awards_api: returning status code 200
DEBUG:root:Checking: status code
DEBUG:root:Checking: keys
DEBUG:root:TEST: GET /awards/type/week
DEBUG:root:QueryTool.__init__(): creating engine in dev
DEBUG:root:QueryTool.__init__(): connecting to db
DEBUG:root:QueryTool.get_awards_by_filter(): query is select * from awards where type = :key;
DEBUG:root:QueryTool.build_json_select(): returning {'award_ids': [{u'authorizing_user_id': 1, u'distributed': True, u'awarded_datetime': '2019-04-27 10:00:00', u'receiving_user_id': 'None', u'award_id': 1, u'type': 'week'}]}
DEBUG:root:QueryTool.disconnect(): closing connection to db
INFO:root:awards_api: returning result {'award_ids': [{u'authorizing_user_id': 1, u'distributed': True, u'awarded_datetime': '2019-04-27 10:00:00', u'receiving_user_id': 'None', u'award_id': 1, u'type': 'week'}]}
INFO:root:awards_api: returning status code 200
DEBUG:root:Checking: status code
DEBUG:root:Checking: keys
DEBUG:root:TEST: GET /awards/type/month
DEBUG:root:QueryTool.__init__(): creating engine in dev
DEBUG:root:QueryTool.__init__(): connecting to db
DEBUG:root:QueryTool.get_awards_by_filter(): query is select * from awards where type = :key;
DEBUG:root:QueryTool.build_json_select(): returning {'award_ids': []}
DEBUG:root:QueryTool.disconnect(): closing connection to db
INFO:root:awards_api: returning result {'award_ids': []}
INFO:root:awards_api: returning status code 200
DEBUG:root:Checking: status code
DEBUG:root:Checking: keys
DEBUG:root:TEST: GET /users
DEBUG:root:QueryTool.__init__(): creating engine in dev
DEBUG:root:QueryTool.__init__(): connecting to db
DEBUG:root:InputValidatorTool.__init__(): creating InputValidatorTool instance
DEBUG:root:QueryTool.get(): query is select user_id, first_name, last_name, created_timestamp, email_address, signature_path from users;
DEBUG:root:QueryTool.build_json_select(): returning {'user_ids': []}
DEBUG:root:QueryTool.disconnect(): closing connection to db
INFO:root:users_api: returning result {'user_ids': []}
INFO:root:users_api: returning status code 200
DEBUG:root:Checking: status code
DEBUG:root:Checking: keys
DEBUG:root:TEST: GET /users/1
DEBUG:root:QueryTool.__init__(): creating engine in dev
DEBUG:root:QueryTool.__init__(): connecting to db
DEBUG:root:InputValidatorTool.__init__(): creating InputValidatorTool instance
DEBUG:root:QueryTool.get_by_id(): query is select user_id, first_name, last_name, email_address, created_timestamp, signature_path from users where user_id = :id;
DEBUG:root:QueryTool.build_json_select(): returning {'errors': [{'field': 'user_id', 'message': 'user_id does not exist'}]}
DEBUG:root:QueryTool.disconnect(): closing connection to db
INFO:root:users_api: returning result {'errors': [{'field': 'user_id', 'message': 'user_id does not exist'}]}
INFO:root:users_api: returning status code 400
DEBUG:root:Checking: status code
DEBUG:root:TEST: GET /users/1/login
DEBUG:root:QueryTool.__init__(): creating engine in dev
DEBUG:root:QueryTool.__init__(): connecting to db
DEBUG:root:InputValidatorTool.__init__(): creating InputValidatorTool instance
DEBUG:root:QueryTool.get_login_by_id(): query is select password from users where user_id = :id;
DEBUG:root:QueryTool.build_json_select(): returning {'errors': [{'field': 'user_id', 'message': 'user_id does not exist'}]}
DEBUG:root:QueryTool.disconnect(): closing connection to db
INFO:root:users_api (users_login()): returning result {'errors': [{'field': 'user_id', 'message': 'user_id does not exist'}]}
INFO:root:users_api (users_login()): returning status code 400
DEBUG:root:Checking: status code
